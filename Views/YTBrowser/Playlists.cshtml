@using System.Globalization;
@using PagedList.Mvc
@using YTUsageViewer.Helpers
@using YTUsageViewer.Models
@model PagedList.IPagedList<Playlist>

@{
    ViewBag.Title = "Playlists list";
    Layout = "~/Views/Shared/_YTLayout.cshtml";
    ViewBag.CurrentYtMenu = YTBrowserMenu.Playlists;
    var newSortDir = ViewBag.CurrentFilter.SortDir == "ASC" ? "DESC" : "ASC";
    var textInfo = new CultureInfo("en-US", false).TextInfo;
    textInfo.ToTitleCase("abc");
}
<h2>@ViewBag.Title</h2>
<div id="resultItems">
    @using (Html.BeginForm("Playlists", "YTBrowser", FormMethod.Get))
    {
        <div class="panel panel-default">
            <div class="panel-body" style="padding:0 15px;">
                <div class="row form-row">
                    <label for="Title" class="col-sm-2">Find by name</label>
                    <div class="col-sm-4">
                        @Html.TextBox("PlaylistName", ViewBag.CurrentFilter.PlaylistName as string, new { @class = "form-control" })
                    </div>
                    <div class="col-sm-1">
                        @Html.Partial("_SortNPageInputs")
                        <input type="submit" name="Search" value="Search" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>    
    }
    <table class="table">
        <tr>
            <th>
                @Html.ActionLink("Title", "Playlists", new { SortOrder = "title", SortDir = newSortDir, PlaylistName = ViewBag.CurrentFilter.PlaylistName, PageNumber = ViewBag.CurrentFilter.PageNumber })
                <span class="glyphicon @Html.GetSortDirIcon("title") pull-right"></span>
            </th>
            <th>
                @Html.ActionLink("Published At", "Playlists", new { SortOrder = "publishedAt", SortDir = newSortDir, PlaylistName = ViewBag.CurrentFilter.PlaylistName, PageNumber = ViewBag.CurrentFilter.PageNumber })
                <span class="glyphicon @Html.GetSortDirIcon("publishedAt") pull-right"></span>
            </th>
            <th>
                @Html.ActionLink("Privacy Status", "Playlists", new { SortOrder = "privacyStatus", SortDir = newSortDir, PlaylistName = ViewBag.CurrentFilter.PlaylistName, PageNumber = ViewBag.CurrentFilter.PageNumber })
                <span class="glyphicon @Html.GetSortDirIcon("privacyStatus") pull-right"></span>
            </th>
            <th>
                @Html.ActionLink("Inserted Date", "Playlists", new { sortOrder = "insertedDate", sortDir = newSortDir, PlaylistName = ViewBag.CurrentFilter.PlaylistName, pageNumber = ViewBag.CurrentFilter.PageNumber })
                <span class="glyphicon @Html.GetSortDirIcon("insertedDate") pull-right"></span>
            </th>
            <th>
                @Html.ActionLink("Is Removed", "Playlists", new { sortOrder = "isRemoved", sortDir = newSortDir, PlaylistName = ViewBag.CurrentFilter.PlaylistName, pageNumber = ViewBag.CurrentFilter.PageNumber })
                <span class="glyphicon @Html.GetSortDirIcon("isRemoved") pull-right"></span>
            </th>
        </tr>

        @foreach (var item in Model)
        {
            <tr rowKey="@item.CharId">
                <td>
                    @Html.ActionLink(@item.Title, "PlaylistItems", new { SearchMode= PlaylistItemSearchMode.ForPlaylist, PlaylistId = item.CharId },
                        new { title = "Click to view Playlist Items" })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PublishedAt)
                </td>
                <td>
                    @textInfo.ToTitleCase(item.PrivacyStatus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InsertedDate)
                </td>
                <td>
                    @(item.IsRemoved == "Y"? "Yes" : "No")
                </td>
            </tr>
        }

    </table>
</div>
@*PAGED LIST*@
<div class="pagedList">
    @Html.JSPagedListPager(Model)
</div>

@section scripts {
    <script>
        $('#btnExport').click(function () {
            alert("Exporting Playlists (WIP)");
        });
    </script>
}
